
bool rayBoxIntersectTime (vec3 l1,vec3 invm,vec3 bmin,vec3 bmax, out float tMin, out float tMax)
{
	vec3 bmin_l1 = (bmin - l1)*invm;
	vec3 bmax_l1 = (bmax - l1)*invm;
	vec3 minVec = min (bmin_l1, bmax_l1);
	vec3 maxVec = max (bmin_l1, bmax_l1);

	float tmin = max(max(minVec.x, minVec.y), minVec.z);
	float tmax = min(min(maxVec.x, maxVec.y), maxVec.z);

	bool retVal = ((tmax >= tmin) && (tmin < 1.0) && (tmax > 0.0));
	tMin = tmin;
	tMax = tmax;
	return retVal;
}

uint countSetBits(uint n)
{
	uint count = 0u;
	while (n != 0u) {
		count += (n & 1u);
		n >>= 1u;
	}
	return count;
}

uint countSetBitsBefore(uint n, uint comp)
{
	uint count = 0u;
	uint leadingBit = 0x80u;
	while (n != 0u) {
		if ( leadingBit == comp ) return count;
		if ((n & 0x80u) != 0u) count++;
		n <<= 1u;
		leadingBit >>= 1u;
	}
	return count;
}

const vec3 grid0Min = vec3 (-5.00, -5.00, -5.00);
const vec3 grid0Max = vec3 (5.00, 5.00, 5.00);
const vec3 grid0Range = grid0Max - grid0Min;
uint svoObject0[480] = uint[](128u,2210513095u,3479298144u,1206382640u,2955944416u,2948644703u,3759157328u,4287565583u,3759675512u,2139587772u,802340674u,3188982804u,141045714u,2138838076u,868254667u,3286638110u,504914401u,2400088239u,4111435140u,25231882u,717225475u,1058011896u,3229678206u,2130212960u,2131742716u,1009857343u,2275802654u,3097205408u,547535824u,2192417534u,3288236371u,3896412222u,505289727u,4279177016u,4043288476u,2021159043u,2386045908u,708321408u,3052425285u,4261731647u,2600436334u,1905893279u,4231802947u,3476757529u,3877378112u,1105215936u,34434u,4289098691u,3288284978u,4058111969u,1368453360u,4030781552u,2018533408u,540094515u,863606808u,301587464u,2349928471u,3958414079u,1086318151u,2701128451u,61471098u,2156002367u,62979548u,3180696977u,2123695444u,358083563u,1106362448u,272611232u,1587628053u,2095138053u,3746421117u,802705685u,17108991u,944109840u,2236852288u,1090600768u,3208819995u,1789041304u,2577271807u,4244787370u,4078985120u,265989392u,626174633u,277056386u,2952430954u,532654112u,573780048u,4286382072u,404256888u,2308730983u,4027342703u,3436158974u,2146558435u,2551187007u,867382067u,865704345u,2576993484u,3704409341u,3258775938u,3176781832u,2297956543u,3808397308u,71073779u,4062383231u,4001299939u,3858923261u,4294504910u,2281914348u,3370546118u,1063543298u,537132546u,4261943487u,4271477196u,4224646856u,3292938240u,272650234u,4016187103u,4133678343u,4080218316u,3476239359u,3120287513u,2172675047u,4294757583u,4090285104u,553641598u,4193511022u,2294243840u,2818752010u,1848374463u,3254062863u,2127319104u,2682678906u,2545967183u,3435708155u,4096778585u,3242293009u,32380176u,4007949124u,1964264516u,1306384933u,1559897560u,2123720725u,1746228546u,2881399466u,2854072410u,2879738954u,2696673066u,3293784772u,85276532u,325535162u,100024385u,1146355551u,1678294869u,504498176u,4205335840u,1476307522u,3236676576u,1642328561u,1882585070u,2403516167u,3305150488u,2019298364u,1010744862u,3189279275u,4224854963u,450941017u,4187592831u,3556214268u,1020133314u,2210530113u,4111530008u,2021161084u,1010580528u,1042161176u,270274318u,137033831u,942682831u,2553417984u,941497344u,42601469u,3154108156u,1305464013u,3006461814u,1717139953u,2423468851u,817045905u,2174534732u,3435978750u,1727565654u,1743294268u,673986629u,1146291445u,1599430645u,1132456938u,79564970u,1142956277u,4152270903u,4042959876u,15723029u,1426248962u,1426595951u,3109421437u,2114168874u,3210696535u,2713408853u,584799522u,197087932u,1165736000u,1429688639u,3849805919u,2758811688u,2290650589u,1172218197u,3726840081u,269100646u,661910263u,53687288u,2147058049u,2576974064u,48636451u,3693338611u,1932657914u,3676307717u,289800111u,2419055093u,13633535u,2172296674u,497041024u,1090599296u,2174319864u,2156429354u,3184737979u,4274834355u,214679137u,2576980383u,818711756u,3482945446u,1718078707u,3006477294u,837158937u,3800037162u,3183620970u,2238352376u,940111887u,1409025987u,1807999939u,1094778942u,3170492385u,1589516448u,2293953556u,1431826479u,4059939281u,3236986895u,2728942085u,4001676334u,4096475821u,1157911812u,4260223014u,3985661336u,1210614435u,3953795559u,252317429u,1907239296u,2157550507u,2916223661u,3501965224u,3307964629u,1109591347u,4094946919u,2556934759u,842212146u,2559089048u,3722214883u,67959217u,1369366784u,1930441523u,859412880u,429494400u,2149974566u,1912733717u,1902108977u,465565281u,3099445247u,3614835624u,92237105u,2046656511u,4110415261u,289521666u,2863328800u,4023307453u,4007495910u,429496729u,4077702348u,3489236582u,1743158467u,858993470u,1771987894u,1613147005u,4205488375u,717518632u,3308487101u,3713313620u,2864403540u,1430533457u,1091958080u,1433073533u,1431651668u,1159548949u,3713390613u,1431795031u,1939376538u,2310777506u,3710041354u,2878173327u,3207831073u,3726669649u,785453358u,3508951910u,1466221633u,3435650275u,354165589u,3691668066u,644297527u,1072484249u,3349046887u,3435923694u,2348810786u,35746355u,2013212880u,960757930u,799973498u,937967136u,2238050u,1055845832u,2927413934u,1641660391u,1731457843u,839096729u,4169238988u,993254652u,4004998818u,1718528744u,2821507211u,2909972567u,1028661376u,2650032809u,3186754650u,593423198u,2740234772u,91585876u,313256159u,3672801578u,354966913u,1599438337u,4195723832u,2283509914u,3015531445u,1117825928u,4144498935u,1914544699u,2272596717u,285408530u,1199011396u,1145327101u,1110793674u,4114670082u,1717990190u,3438235385u,2254857830u,4240932046u,3900702720u,127824u,3823570448u,4093110247u,2215131377u,3346215715u,867383680u,2308544924u,3704409915u,819912317u,2547091165u,11188986u,2284348387u,1029946306u,553714335u,2593874953u,3080889082u,539670007u,2852786346u,4210066095u,2935920584u,392693804u,2326245026u,2259421354u,3203663904u,2699820709u,2014293930u,29211972u,3209964509u,2165379088u,469280943u,1879831548u,102935040u,1429557264u,937720711u,2007263259u,2452634563u,4170713593u,4261151821u,4161035763u,2740059409u,1342833159u,322138371u,2449054081u,2160590848u,2952u,2290578367u,1036991680u,3459265439u,2682676838u,404339507u,1153048781u,2735030595u,3622823700u,470897889u,4199929793u,1598062518u,1448862724u,32510127u,1353176965u,91772920u,130187971u,3768590480u,4034863359u,2949840130u,2105869568u,2102668240u,802426917u,3764298238u,2784014512u,4030216248u,2021407807u,3900697588u,534003537u,1094718733u,68020605u,3900344238u,79432892u,1070854718u,35536889u,3783198471u,2122244336u,2163228480u,1342406785u,4193533247u,3233825020u,530571360u,1618493240u,536870912u,136u,139230448u,3425073273u,1711674123u,838871740u,4087482904u,4040105534u,1358462590u,2558033897u,919078826u,3420981762u,670461065u,1140020415u,318645241u,4162731929u,2173204472u,32526576u,1089532024u,2019557376u,0u,0u);
uint readBitsSVO0 (uint bitLoc, uint numBits) {
    uint wordLoc = bitLoc / 32u;
    uint leftToRead = (32u - (bitLoc % 32u));
    if (numBits <= leftToRead) {
        uint shiftToMask = leftToRead - numBits;
        uint masker = 0xFFFFFFFFu;
        masker >>= uint(32u - numBits);
        masker <<= shiftToMask;
        uint value = (svoObject0[wordLoc] & masker);
        value >>= shiftToMask;
        return value;
    } else {
        uint bottomBits = numBits - leftToRead;
        uint masker = 0xFFFFFFFFu;
        masker >>= uint(32u - leftToRead);
        uint topNum = (svoObject0[wordLoc] & masker);
        uint bottomMasker = 0xFFFFFFFFu;
        bottomMasker <<= uint(32u - bottomBits);
        uint value = (svoObject0[wordLoc + 1u] & bottomMasker);
        uint bottomNum = (value >> uint(32u - bottomBits));
        return ((topNum << bottomBits) | bottomNum);
    }
}

bool readLeafSVO0 (vec3 samplePos, vec3 sampleDir, out vec3 skipPos) {
    skipPos = vec3 (10000.0);
    if ( any(lessThan(samplePos, grid0Min)) || any(greaterThan(samplePos, grid0Max)) ) return false;
    uvec3 topBrickPos = uvec3 (samplePos - grid0Min);
    uint topBrickId = topBrickPos.z + topBrickPos.y * uint(grid0Range.x) + topBrickPos.x * uint(grid0Range.y) * uint(grid0Range.z);
    uint streamReadPos = 0u;
    for (int i = 0; i < int(topBrickId); i++) {
        uint isOcc = readBitsSVO0 (streamReadPos, 1u);
        streamReadPos += 1u;
        if (isOcc == 1u) {
            uint countMidBricks = countSetBits (readBitsSVO0 (streamReadPos, 8u));
            streamReadPos += (8u + countMidBricks * 8u);
        }
    }
    uint topBrick = readBitsSVO0 (streamReadPos, 1u);
    if (topBrick == 0u) {
        vec3 topBrickMin = grid0Min + vec3 (topBrickPos);
        vec3 topBrickMax = topBrickMin + vec3 (1.0);
        vec3 p1 = samplePos;
        vec3 p2 = p1 + sampleDir * 2.0;
        vec3 m = p2 - p1;
        float tMin, tMax;
        rayBoxIntersectTime (p1, vec3(1.0)/m, topBrickMin, topBrickMax, tMin, tMax);
        skipPos = p1 + m * (tMax + 0.01);
        return false;
    }
    streamReadPos += 1u;
    uint midBricks = readBitsSVO0 (streamReadPos, 8u);
    streamReadPos += 8u;
    vec3 topBrickMinCorner = grid0Min + vec3 (topBrickPos);
    vec3 sampleRelativeToTopBrick = fract (samplePos);
    uint checkMidBrickBit = 0x80u;
    vec3 sampleRelativeToMidBrick = sampleRelativeToTopBrick;
    vec3 midBrickPos = vec3 (0.0);
    if ( sampleRelativeToTopBrick.x > 0.5 ) {
        sampleRelativeToMidBrick.x -= 0.5;
        midBrickPos.x = 0.5;
        checkMidBrickBit >>= 4u;
    }
    if ( sampleRelativeToTopBrick.y > 0.5 ) {
        sampleRelativeToMidBrick.y -= 0.5;
        midBrickPos.y = 0.5;
        checkMidBrickBit >>= 2u;
    }
    if ( sampleRelativeToTopBrick.z > 0.5 ) {
        sampleRelativeToMidBrick.z -= 0.5;
        midBrickPos.z = 0.5;
        checkMidBrickBit >>= 1u;
    }
    if ( (midBricks & checkMidBrickBit) == 0u ) {
        vec3 midBrickMin = grid0Min + vec3 (topBrickPos) + midBrickPos;
        vec3 midBrickMax = midBrickMin + vec3 (0.5);
        vec3 p1 = samplePos;
        vec3 p2 = p1 + sampleDir * 2.0;
        vec3 m = p2 - p1;
        float tMin, tMax;
        rayBoxIntersectTime (p1, vec3(1.0)/m, midBrickMin, midBrickMax, tMin, tMax);
        skipPos = p1 + m * (tMax + 0.01);
        return false;
    }
    uint skipMidBricks = countSetBitsBefore (midBricks, checkMidBrickBit);
    streamReadPos += (8u * skipMidBricks);
    uint finalMidBrick = readBitsSVO0 (streamReadPos, 8u);
    uint checkVoxelBrickBit = 0x80u;
    if ( sampleRelativeToMidBrick.x > 0.25 ) {
    checkVoxelBrickBit >>= 4u;
    }
    if ( sampleRelativeToMidBrick.y > 0.25 ) {
        checkVoxelBrickBit >>= 2u;
    }
    if ( sampleRelativeToMidBrick.z > 0.25 ) {
        checkVoxelBrickBit >>= 1u;
    }
    if ( (checkVoxelBrickBit & finalMidBrick) != 0u ) return true;
    skipPos = samplePos + sampleDir * 0.25;
    return false;
}

bool traceRaySVO0(vec3 p1, vec3 p2, out vec3 hitPos) {
    vec3 m = p2 - p1;
    float hitMin, hitMax;
    if ( !rayBoxIntersectTime (p1, vec3(1.0)/m, grid0Min, grid0Max, hitMin, hitMax) ) {
        hitPos = vec3 (-1.0);
        return false;
    }
    
    hitMin += 0.00001;
    hitMax -= 0.00001;
    vec3 curPos = p1 + hitMin * m;
    vec3 curDir = normalize (m);
    vec3 skipPos = vec3 (0.0);
    for (int i = 0; i != 100; i++) {
        if (readLeafSVO0 (curPos, curDir, skipPos)) {
            hitPos = curPos;
            return true;
        }
        if ( skipPos == vec3(10000.0) ) break;
        curPos = skipPos;
    }
    return false;
}
const vec3 grid1Min = vec3 (-5.00, -5.00, -5.00);
const vec3 grid1Max = vec3 (5.00, 5.00, 5.00);
const vec3 grid1Range = grid1Max - grid1Min;
uint svoObject1[552] = uint[](555753728u,33282u,1107361792u,131616u,10912258u,790790101u,3934331490u,170148087u,3830497765u,1145061458u,4030866419u,480264256u,1617085072u,1677864546u,1370899524u,538970728u,979573254u,3154653522u,3845803550u,337462293u,167905280u,130828425u,646513583u,4265887136u,3225436184u,297743345u,136521480u,1084097418u,2601144071u,2185563685u,3781509208u,328216752u,1213728776u,553976833u,3888399463u,1199611518u,2181152854u,3166191118u,101321247u,17433867u,262234199u,23757884u,739945504u,1090609643u,1442952287u,2701066436u,2818707330u,2156036231u,3225584195u,65225039u,34743050u,2919893024u,661393676u,1053386883u,3772817554u,2750435488u,1124529091u,84226712u,3288403717u,3523481063u,2248280072u,564196289u,33826913u,1126240448u,562069632u,284188480u,1154480882u,539402810u,708485117u,304123017u,371213451u,4279316548u,1728548677u,2447937520u,4162979848u,771509267u,1691897148u,3421904928u,221398152u,2570789122u,68429977u,2174645318u,3363866753u,220100620u,4020376736u,1746404002u,4287635983u,260328323u,1066423373u,269816216u,2405957632u,1205011918u,289945472u,1369016135u,2093182470u,2228118114u,572665649u,304156963u,2570089233u,334444244u,3227763980u,149828138u,136520302u,3866364438u,3261601109u,2544020153u,67132500u,70372476u,1779572876u,956227877u,2420238852u,2232575810u,2066761330u,361302786u,3020431906u,8288000u,2891608360u,2158534656u,2288749226u,155362192u,1344334584u,2370853202u,3691389474u,2793632u,2863356682u,167904341u,3289667412u,2870007056u,137007831u,3440263184u,847299559u,2795640840u,547475267u,202401479u,134396972u,472223933u,4242747808u,819998950u,143190090u,4148447368u,113283199u,3302245937u,105123137u,83953597u,184733707u,3564447311u,2432974824u,2290649218u,34080799u,4106257480u,2350539840u,3452982319u,2483343425u,1129495392u,2453739265u,1360736780u,2570687257u,2575927432u,2648491227u,542929699u,3507814417u,268438056u,176695226u,2855364387u,577476881u,286332364u,2357513228u,3865092322u,577968418u,287390609u,320901398u,1405731649u,3243233411u,186286108u,3196240545u,3439639617u,2197935361u,1519406344u,136076372u,1679680496u,2150934913u,830480449u,20570258u,1763967035u,1530004685u,2600667528u,268993740u,1149781134u,4228143440u,47520232u,58640608u,136324597u,4428861u,1211628890u,3232473482u,169470064u,2159019010u,2720123937u,3347515632u,3318082946u,3833729128u,276567084u,58196179u,2292904616u,2235777793u,1092741166u,10534816u,312825866u,167805056u,3720659324u,134656689u,3676102913u,3894571005u,1353188706u,1216443904u,547365567u,4032299368u,170965632u,4166529136u,336331781u,3674286810u,290947080u,537915732u,3359820473u,2751071237u,2173256040u,2805932065u,237834194u,2644384132u,2691334081u,714171031u,2686715905u,2151719426u,2759827480u,4072800680u,1008763024u,2348841996u,137375934u,604377168u,3256646716u,2198603294u,2053251200u,2150117229u,371462209u,650895175u,2551194049u,3760054152u,3423715923u,40817770u,3023052044u,43687224u,809835272u,1949318178u,270077197u,34516880u,1388380421u,880512251u,2718205992u,89576720u,1095979073u,554976584u,1094794698u,835797340u,474039556u,1431697513u,268951884u,738733570u,235544405u,107245733u,1516257537u,2069922240u,2517325343u,221184255u,261032040u,943883832u,692464152u,272648442u,2152861728u,2146210963u,3535832001u,236904770u,235473036u,142640258u,2192098124u,167532624u,1750093580u,4193781794u,3767013448u,134357153u,552642582u,1216095276u,806370932u,1756703402u,3021605386u,11012128u,1611147784u,101843470u,3836398082u,2298872448u,242788729u,370435142u,27263234u,25231681u,1280403936u,2757383270u,1358115100u,1880903765u,2351990792u,1607216176u,1098957507u,4282780680u,1778458834u,251675652u,1040979084u,2170482864u,3498082530u,235835432u,673351618u,1254102528u,352393052u,1014334852u,339706304u,941530633u,2703262689u,4061131269u,3936355670u,2607366806u,486938649u,201854342u,2191623038u,2171245922u,674529621u,306782890u,2421695106u,10136344u,1630986321u,18283369u,1979810825u,1683952131u,236478735u,1040984096u,2316072480u,573048866u,1848647902u,839913472u,9457664u,2642445573u,2325102788u,2163130432u,3154562815u,3273777676u,206360544u,2696283014u,573045780u,694264082u,806363902u,1165510512u,1417699839u,858874948u,2413175924u,3306161537u,564693672u,535896608u,2161654792u,2326757877u,92603360u,2149589217u,4031799440u,2700744707u,3494092867u,4168115457u,3781173440u,1163138066u,2837701089u,1075283440u,537960688u,4171788465u,86012819u,2702795520u,3112239495u,609287936u,4040190016u,1627740932u,3850635032u,634420448u,3783394092u,70377954u,213520560u,2694849568u,70247436u,738238784u,2736779779u,204553254u,832739838u,2164287584u,1615861073u,174134894u,1678787380u,1158680835u,3122242568u,2287372706u,548055557u,1453938346u,1447314500u,2293443042u,2863309312u,3861015682u,1291551761u,2734950819u,832084112u,15u,2206270977u,3033473760u,1086516834u,3574597531u,97306444u,845737570u,704800294u,2067081440u,3508682649u,1493237873u,287298513u,755030219u,353178241u,4358401u,3703309029u,1083213716u,89134403u,3229634214u,601890912u,981639152u,2418021162u,33937961u,2674216468u,1474111979u,941196832u,594550943u,1142182959u,1635115072u,1377045016u,285083394u,410712120u,705364021u,109281826u,2707980727u,262553712u,272695176u,783311016u,270549013u,410379528u,1964533844u,807936538u,446962594u,2864292536u,176742271u,2853447921u,1007956029u,438374538u,89478521u,1452491073u,1084753960u,1790536022u,2529041567u,3725596680u,22353898u,626376768u,538983074u,443656864u,1429034000u,669327429u,2689733936u,815918072u,143208456u,3930326690u,2852257806u,570747399u,2963913472u,4060283280u,58u,35401759u,1491880656u,3205238654u,572527226u,748781375u,320941640u,338403089u,2437252124u,97503451u,857739073u,3507510488u,167904515u,2206845363u,700395840u,2836988421u,2862092312u,1292377089u,894595395u,1430282193u,1094746474u,446709360u,1765867906u,68973600u,3881177216u,2550681692u,473432574u,3925879333u,3268397592u,4037086725u,169377029u,875578402u,540939284u,1006722672u,4039169633u,1485814319u,2155513475u,2268346822u,673189763u,1410319u,4230480940u,342114581u,3288208160u,3051440656u,1241776769u,2716118354u,3490563936u,42272256u,0u,1141374999u,50661903u,2231829520u,1606468161u,692732160u,142641089u,3224934411u,3759412240u,467672688u,1745084449u,3806333936u,84018442u,4161092916u,1080041473u,1347440888u,1745496096u,1880891392u,2085894484u,43792243u,680871464u,4097840201u,3557816333u,2930001834u,3389284352u,0u);
uint readBitsSVO1 (uint bitLoc, uint numBits) {
    uint wordLoc = bitLoc / 32u;
    uint leftToRead = (32u - (bitLoc % 32u));
    if (numBits <= leftToRead) {
        uint shiftToMask = leftToRead - numBits;
        uint masker = 0xFFFFFFFFu;
        masker >>= uint(32u - numBits);
        masker <<= shiftToMask;
        uint value = (svoObject1[wordLoc] & masker);
        value >>= shiftToMask;
        return value;
    } else {
        uint bottomBits = numBits - leftToRead;
        uint masker = 0xFFFFFFFFu;
        masker >>= uint(32u - leftToRead);
        uint topNum = (svoObject1[wordLoc] & masker);
        uint bottomMasker = 0xFFFFFFFFu;
        bottomMasker <<= uint(32u - bottomBits);
        uint value = (svoObject1[wordLoc + 1u] & bottomMasker);
        uint bottomNum = (value >> uint(32u - bottomBits));
        return ((topNum << bottomBits) | bottomNum);
    }
}

bool readLeafSVO1 (vec3 samplePos, vec3 sampleDir, out vec3 skipPos) {
    skipPos = vec3 (10000.0);
    if ( any(lessThan(samplePos, grid1Min)) || any(greaterThan(samplePos, grid1Max)) ) return false;
    uvec3 topBrickPos = uvec3 (samplePos - grid1Min);
    uint topBrickId = topBrickPos.z + topBrickPos.y * uint(grid0Range.x) + topBrickPos.x * uint(grid0Range.y) * uint(grid0Range.z);
    uint streamReadPos = 0u;
    for (int i = 0; i < int(topBrickId); i++) {
        uint isOcc = readBitsSVO1 (streamReadPos, 1u);
        streamReadPos += 1u;
        if (isOcc == 1u) {
            uint countMidBricks = countSetBits (readBitsSVO1 (streamReadPos, 8u));
            streamReadPos += (8u + countMidBricks * 8u);
        }
    }
    uint topBrick = readBitsSVO1 (streamReadPos, 1u);
    if (topBrick == 0u) {
        vec3 topBrickMin = grid1Min + vec3 (topBrickPos);
        vec3 topBrickMax = topBrickMin + vec3 (1.0);
        vec3 p1 = samplePos;
        vec3 p2 = p1 + sampleDir * 2.0;
        vec3 m = p2 - p1;
        float tMin, tMax;
        rayBoxIntersectTime (p1, vec3(1.0)/m, topBrickMin, topBrickMax, tMin, tMax);
        skipPos = p1 + m * (tMax + 0.01);
        return false;
    }
    streamReadPos += 1u;
    uint midBricks = readBitsSVO1 (streamReadPos, 8u);
    streamReadPos += 8u;
    vec3 topBrickMinCorner = grid1Min + vec3 (topBrickPos);
    vec3 sampleRelativeToTopBrick = fract (samplePos);
    uint checkMidBrickBit = 0x80u;
    vec3 sampleRelativeToMidBrick = sampleRelativeToTopBrick;
    vec3 midBrickPos = vec3 (0.0);
    if ( sampleRelativeToTopBrick.x > 0.5 ) {
        sampleRelativeToMidBrick.x -= 0.5;
        midBrickPos.x = 0.5;
        checkMidBrickBit >>= 4u;
    }
    if ( sampleRelativeToTopBrick.y > 0.5 ) {
        sampleRelativeToMidBrick.y -= 0.5;
        midBrickPos.y = 0.5;
        checkMidBrickBit >>= 2u;
    }
    if ( sampleRelativeToTopBrick.z > 0.5 ) {
        sampleRelativeToMidBrick.z -= 0.5;
        midBrickPos.z = 0.5;
        checkMidBrickBit >>= 1u;
    }
    if ( (midBricks & checkMidBrickBit) == 0u ) {
        vec3 midBrickMin = grid1Min + vec3 (topBrickPos) + midBrickPos;
        vec3 midBrickMax = midBrickMin + vec3 (0.5);
        vec3 p1 = samplePos;
        vec3 p2 = p1 + sampleDir * 2.0;
        vec3 m = p2 - p1;
        float tMin, tMax;
        rayBoxIntersectTime (p1, vec3(1.0)/m, midBrickMin, midBrickMax, tMin, tMax);
        skipPos = p1 + m * (tMax + 0.01);
        return false;
    }
    uint skipMidBricks = countSetBitsBefore (midBricks, checkMidBrickBit);
    streamReadPos += (8u * skipMidBricks);
    uint finalMidBrick = readBitsSVO1 (streamReadPos, 8u);
    uint checkVoxelBrickBit = 0x80u;
    if ( sampleRelativeToMidBrick.x > 0.25 ) {
    checkVoxelBrickBit >>= 4u;
    }
    if ( sampleRelativeToMidBrick.y > 0.25 ) {
        checkVoxelBrickBit >>= 2u;
    }
    if ( sampleRelativeToMidBrick.z > 0.25 ) {
        checkVoxelBrickBit >>= 1u;
    }
    if ( (checkVoxelBrickBit & finalMidBrick) != 0u ) return true;
    skipPos = samplePos + sampleDir * 0.25;
    return false;
}

bool traceRaySVO1(vec3 p1, vec3 p2, out vec3 hitPos) {
    vec3 m = p2 - p1;
    float hitMin, hitMax;
    if ( !rayBoxIntersectTime (p1, vec3(1.0)/m, grid1Min, grid1Max, hitMin, hitMax) ) {
        hitPos = vec3 (-1.0);
        return false;
    }
    
    hitMin += 0.00001;
    hitMax -= 0.00001;
    vec3 curPos = p1 + hitMin * m;
    vec3 curDir = normalize (m);
    vec3 skipPos = vec3 (0.0);
    for (int i = 0; i != 100; i++) {
        if (readLeafSVO1 (curPos, curDir, skipPos)) {
            hitPos = curPos;
            return true;
        }
        if ( skipPos == vec3(10000.0) ) break;
        curPos = skipPos;
    }
    return false;
}
const vec3 grid2Min = vec3 (-5.00, -5.00, -5.00);
const vec3 grid2Max = vec3 (5.00, 5.00, 5.00);
const vec3 grid2Range = grid2Max - grid2Min;
uint svoObject2[407] = uint[](140517500u,872168448u,0u,131619u,53674755u,4261815835u,3193971175u,3791598371u,4042534961u,4090494731u,2684352639u,1711570767u,3405523952u,924066117u,1975578498u,663121657u,2724626430u,4233327587u,3288326141u,4261011714u,1719239068u,3430467388u,3896524816u,2361393382u,545254143u,4294967171u,859550515u,938866161u,530668769u,1074819313u,2146990200u,2147055624u,180108799u,3287531039u,3995016208u,34118415u,3482259215u,2231732096u,1090724097u,8742u,571683635u,855849369u,2568616444u,217843729u,17805197u,2141745799u,2369586110u,716992487u,2716594078u,1726459658u,150319087u,135069826u,96584131u,64617079u,10611148u,938409160u,3292807169u,2160066570u,2276067319u,3208327913u,1138220991u,2583423903u,2551496618u,705212296u,33428970u,2004899214u,4020955818u,2863393410u,2192056320u,2863315592u,686484130u,720093743u,4009668864u,803976512u,716876458u,2864415243u,570462127u,2707129727u,3936626698u,2819235874u,796884940u,854360339u,1072686942u,403760031u,2634721800u,69649u,2583160379u,3880777518u,3233870655u,568352871u,3790610592u,2097429844u,894711649u,1197897055u,3866574675u,1055078156u,2019010047u,2277255212u,1007181856u,1815166782u,496901649u,134742016u,1141128714u,505290266u,168296479u,17766174u,4287102850u,4286580679u,3539846092u,1139080513u,3862970370u,2728569505u,4025420808u,821554956u,3867307751u,3651594376u,2934603938u,2854224622u,2327309482u,2930116110u,984545455u,3748668128u,547516415u,4031574064u,4256829384u,263093368u,2021294726u,1008989227u,3559396688u,274038783u,3774609366u,121898755u,4092832249u,2122351101u,990049547u,4106212485u,22349832u,224220509u,1410195281u,1432633469u,2083249195u,3558089045u,1430390795u,1325682683u,256765927u,4184234000u,1878654156u,204698620u,3426641422u,972678662u,1056862368u,3239018104u,3896524991u,2156435328u,2880110530u,2884346240u,2173748444u,4167466612u,538968064u,279564u,3423810335u,1932738457u,2164686809u,2174524544u,1306518046u,4294569881u,3456438015u,4291562168u,2331752463u,1471395874u,60953240u,2308542909u,4250151632u,3886711812u,71321596u,184315856u,2870082677u,1344991230u,3611428390u,89487291u,1976948036u,21303316u,1297440081u,366548730u,167905791u,16974861u,939380667u,4278288815u,4269702681u,2130763231u,4265556739u,1441525418u,2856386879u,1778335903u,2003343219u,789254185u,26308944u,300382165u,1459910468u,262320122u,132261811u,1337697267u,4020223975u,1717995801u,4294128388u,204538572u,3438746107u,2215221734u,1932755515u,2717913216u,4027086856u,276320258u,270008639u,859243295u,2130223007u,2577368554u,1591512092u,4257791502u,505354266u,185073850u,3095951240u,2866985898u,2159024159u,2967381066u,2916446720u,1078214122u,2984108574u,2935345320u,2693103343u,1947641879u,3961783829u,1433786205u,1548043329u,1566393348u,3712341265u,2140167466u,36216823u,2113913843u,51121423u,4269733912u,562136967u,3219124156u,807524303u,3189052436u,894085823u,1598357779u,4227728521u,2145517567u,790761228u,790593823u,2440524113u,1072514932u,1196467872u,50308723u,3006742266u,2738855846u,1746410143u,3217240380u,214168575u,1637465665u,4227281850u,590479368u,545094716u,335540499u,872202232u,3220543897u,4160748799u,4119515114u,1436680567u,386006647u,401276031u,2021161028u,2080195259u,3295321440u,8432383u,2172110847u,2680699454u,3195991973u,1178589320u,2933926562u,2863311550u,2414742024u,246286314u,2263361192u,178817704u,178397698u,2796464894u,2941451950u,34500349u,4054383338u,2852282465u,3891786927u,3884957744u,822020007u,2275930176u,1483488958u,2281787472u,1442314119u,84441336u,4150510396u,4240638777u,3766589947u,3786014652u,3684716031u,263850241u,6051076u,340014581u,1969135710u,2775588904u,947390589u,2105376126u,2172552001u,1094721293u,256851471u,3925442181u,4261932550u,4228578558u,4244570898u,2116447870u,2147074558u,100597408u,4169171136u,1074759811u,2318400415u,2885583800u,2189590913u,3233857760u,1717592096u,14819966u,788496379u,2436054975u,3493845403u,4290772980u,404359951u,538384151u,417796031u,2021154857u,2273806211u,2114059274u,2827659394u,2281684002u,134595523u,3284401158u,1849644513u,3242295530u,44083883u,2936679413u,4293983485u,117277359u,4168632360u,8339279u,3492810800u,1057226712u,270014472u,2456u,2943614564u,3476239155u,2120611393u,1141113875u,4138353673u,4223048123u,926103301u,1073675563u,3498004597u,1140879408u,808982544u,1793u,62914560u,0u,20119859u,288594427u,3885603148u,3085732864u,2192279550u,2550038911u,4290688948u,507437211u,4009730143u,2900889356u,2138273u,4243610879u,2735013070u,1987069884u,1077940288u,4168104056u,1679826944u,0u,19u,16976129u,2148252552u,233865359u,2671755056u,3251060287u,3214636799u,3863002944u,100406476u,3158826771u,4093575137u,4114849310u,2130574849u,326618366u,4244174395u,3292560960u,29639933u,3237380094u,543187040u,855638016u);
uint readBitsSVO2 (uint bitLoc, uint numBits) {
    uint wordLoc = bitLoc / 32u;
    uint leftToRead = (32u - (bitLoc % 32u));
    if (numBits <= leftToRead) {
        uint shiftToMask = leftToRead - numBits;
        uint masker = 0xFFFFFFFFu;
        masker >>= uint(32u - numBits);
        masker <<= shiftToMask;
        uint value = (svoObject2[wordLoc] & masker);
        value >>= shiftToMask;
        return value;
    } else {
        uint bottomBits = numBits - leftToRead;
        uint masker = 0xFFFFFFFFu;
        masker >>= uint(32u - leftToRead);
        uint topNum = (svoObject2[wordLoc] & masker);
        uint bottomMasker = 0xFFFFFFFFu;
        bottomMasker <<= uint(32u - bottomBits);
        uint value = (svoObject2[wordLoc + 1u] & bottomMasker);
        uint bottomNum = (value >> uint(32u - bottomBits));
        return ((topNum << bottomBits) | bottomNum);
    }
}

bool readLeafSVO2 (vec3 samplePos, vec3 sampleDir, out vec3 skipPos) {
    skipPos = vec3 (10000.0);
    if ( any(lessThan(samplePos, grid2Min)) || any(greaterThan(samplePos, grid2Max)) ) return false;
    uvec3 topBrickPos = uvec3 (samplePos - grid2Min);
    uint topBrickId = topBrickPos.z + topBrickPos.y * uint(grid0Range.x) + topBrickPos.x * uint(grid0Range.y) * uint(grid0Range.z);
    uint streamReadPos = 0u;
    for (int i = 0; i < int(topBrickId); i++) {
        uint isOcc = readBitsSVO2 (streamReadPos, 1u);
        streamReadPos += 1u;
        if (isOcc == 1u) {
            uint countMidBricks = countSetBits (readBitsSVO2 (streamReadPos, 8u));
            streamReadPos += (8u + countMidBricks * 8u);
        }
    }
    uint topBrick = readBitsSVO2 (streamReadPos, 1u);
    if (topBrick == 0u) {
        vec3 topBrickMin = grid2Min + vec3 (topBrickPos);
        vec3 topBrickMax = topBrickMin + vec3 (1.0);
        vec3 p1 = samplePos;
        vec3 p2 = p1 + sampleDir * 2.0;
        vec3 m = p2 - p1;
        float tMin, tMax;
        rayBoxIntersectTime (p1, vec3(1.0)/m, topBrickMin, topBrickMax, tMin, tMax);
        skipPos = p1 + m * (tMax + 0.01);
        return false;
    }
    streamReadPos += 1u;
    uint midBricks = readBitsSVO2 (streamReadPos, 8u);
    streamReadPos += 8u;
    vec3 topBrickMinCorner = grid2Min + vec3 (topBrickPos);
    vec3 sampleRelativeToTopBrick = fract (samplePos);
    uint checkMidBrickBit = 0x80u;
    vec3 sampleRelativeToMidBrick = sampleRelativeToTopBrick;
    vec3 midBrickPos = vec3 (0.0);
    if ( sampleRelativeToTopBrick.x > 0.5 ) {
        sampleRelativeToMidBrick.x -= 0.5;
        midBrickPos.x = 0.5;
        checkMidBrickBit >>= 4u;
    }
    if ( sampleRelativeToTopBrick.y > 0.5 ) {
        sampleRelativeToMidBrick.y -= 0.5;
        midBrickPos.y = 0.5;
        checkMidBrickBit >>= 2u;
    }
    if ( sampleRelativeToTopBrick.z > 0.5 ) {
        sampleRelativeToMidBrick.z -= 0.5;
        midBrickPos.z = 0.5;
        checkMidBrickBit >>= 1u;
    }
    if ( (midBricks & checkMidBrickBit) == 0u ) {
        vec3 midBrickMin = grid2Min + vec3 (topBrickPos) + midBrickPos;
        vec3 midBrickMax = midBrickMin + vec3 (0.5);
        vec3 p1 = samplePos;
        vec3 p2 = p1 + sampleDir * 2.0;
        vec3 m = p2 - p1;
        float tMin, tMax;
        rayBoxIntersectTime (p1, vec3(1.0)/m, midBrickMin, midBrickMax, tMin, tMax);
        skipPos = p1 + m * (tMax + 0.01);
        return false;
    }
    uint skipMidBricks = countSetBitsBefore (midBricks, checkMidBrickBit);
    streamReadPos += (8u * skipMidBricks);
    uint finalMidBrick = readBitsSVO2 (streamReadPos, 8u);
    uint checkVoxelBrickBit = 0x80u;
    if ( sampleRelativeToMidBrick.x > 0.25 ) {
    checkVoxelBrickBit >>= 4u;
    }
    if ( sampleRelativeToMidBrick.y > 0.25 ) {
        checkVoxelBrickBit >>= 2u;
    }
    if ( sampleRelativeToMidBrick.z > 0.25 ) {
        checkVoxelBrickBit >>= 1u;
    }
    if ( (checkVoxelBrickBit & finalMidBrick) != 0u ) return true;
    skipPos = samplePos + sampleDir * 0.25;
    return false;
}

bool traceRaySVO2(vec3 p1, vec3 p2, out vec3 hitPos) {
    vec3 m = p2 - p1;
    float hitMin, hitMax;
    if ( !rayBoxIntersectTime (p1, vec3(1.0)/m, grid2Min, grid2Max, hitMin, hitMax) ) {
        hitPos = vec3 (-1.0);
        return false;
    }
    
    hitMin += 0.00001;
    hitMax -= 0.00001;
    vec3 curPos = p1 + hitMin * m;
    vec3 curDir = normalize (m);
    vec3 skipPos = vec3 (0.0);
    for (int i = 0; i != 100; i++) {
        if (readLeafSVO2 (curPos, curDir, skipPos)) {
            hitPos = curPos;
            return true;
        }
        if ( skipPos == vec3(10000.0) ) break;
        curPos = skipPos;
    }
    return false;
}