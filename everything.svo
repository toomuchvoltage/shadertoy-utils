
bool rayBoxIntersectTime (vec3 l1,vec3 invm,vec3 bmin,vec3 bmax, out float tMin, out float tMax)
{
	vec3 bmin_l1 = (bmin - l1)*invm;
	vec3 bmax_l1 = (bmax - l1)*invm;
	vec3 minVec = min (bmin_l1, bmax_l1);
	vec3 maxVec = max (bmin_l1, bmax_l1);

	float tmin = max(max(minVec.x, minVec.y), minVec.z);
	float tmax = min(min(maxVec.x, maxVec.y), maxVec.z);

	bool retVal = ((tmax >= tmin) && (tmin < 1.0) && (tmax > 0.0));
	tMin = tmin;
	tMax = tmax;
	return retVal;
}

uint countSetBits(uint n)
{
	uint count = 0u;
	while (n != 0u) {
		count += (n & 1u);
		n >>= 1u;
	}
	return count;
}

uint countSetBitsBefore(uint n, uint comp)
{
	uint count = 0u;
	uint leadingBit = 0x80u;
	while (n != 0u) {
		if ( leadingBit == comp ) return count;
		if ((n & 0x80u) != 0u) count++;
		n <<= 1u;
		leadingBit >>= 1u;
	}
	return count;
}

const vec3 grid0Min = vec3 (-5.00, -5.00, -5.00);
const vec3 grid0Max = vec3 (5.00, 5.00, 5.00);
const vec3 grid0Range = grid0Max - grid0Min;
uint svoObject0[480] = uint[](128u,2210513095u,3479298144u,1206382640u,2955944416u,2948644703u,3759157328u,4287565583u,3759675512u,2139587772u,802340674u,3188982804u,141045714u,2138838076u,868254667u,3286638110u,504914401u,2400088239u,4111435140u,25231882u,717225475u,1058011896u,3229678206u,2130212960u,2131742716u,1009857343u,2275802654u,3097205408u,547535824u,2192417534u,3288236371u,3896412222u,505289727u,4279177016u,4043288476u,2021159043u,2386045908u,708321408u,3052425285u,4261731647u,2600436334u,1905893279u,4231802947u,3476757529u,3877378112u,1105215936u,34434u,4289098691u,3288284978u,4058111969u,1368453360u,4030781552u,2018533408u,540094515u,863606808u,301587464u,2349928471u,3958414079u,1086318151u,2701128451u,61471098u,2156002367u,62979548u,3180696977u,2123695444u,358083563u,1106362448u,272611232u,1587628053u,2095138053u,3746421117u,802705685u,17108991u,944109840u,2236852288u,1090600768u,3208819995u,1789041304u,2577271807u,4244787370u,4078985120u,265989392u,626174633u,277056386u,2952430954u,532654112u,573780048u,4286382072u,404256888u,2308730983u,4027342703u,3436158974u,2146558435u,2551187007u,867382067u,865704345u,2576993484u,3704409341u,3258775938u,3176781832u,2297956543u,3808397308u,71073779u,4062383231u,4001299939u,3858923261u,4294504910u,2281914348u,3370546118u,1063543298u,537132546u,4261943487u,4271477196u,4224646856u,3292938240u,272650234u,4016187103u,4133678343u,4080218316u,3476239359u,3120287513u,2172675047u,4294757583u,4090285104u,553641598u,4193511022u,2294243840u,2818752010u,1848374463u,3254062863u,2127319104u,2682678906u,2545967183u,3435708155u,4096778585u,3242293009u,32380176u,4007950148u,1964264516u,1306384933u,1559897560u,2123720725u,1746228546u,2881399466u,2854072410u,2879738954u,2696673066u,3293784772u,85276532u,325535162u,100024385u,1146355551u,1678294869u,504498176u,4205335840u,1476307522u,3236676576u,1642328561u,1882585070u,2403516167u,3305150488u,2019298364u,1010744862u,3189279275u,4224854963u,450941017u,4187592831u,3556214268u,1020133314u,2210530113u,4111530008u,2021161084u,1010580528u,1042161176u,270274318u,137033831u,942682831u,2553417984u,941497344u,42601469u,3154108156u,1305464013u,3006461814u,1717139953u,2423468851u,817045905u,2174534732u,3435978750u,1727565654u,1743294268u,673986629u,1146291445u,1599430645u,1132456938u,79564970u,1142956277u,4152270903u,4042959876u,15723029u,1426248962u,1426595951u,3109421437u,2114168874u,3210696535u,2713408853u,584799522u,197087932u,1165736000u,1429688639u,3849805919u,2758811688u,2290650589u,1172218197u,3726840081u,269100646u,661910263u,53687288u,2147058049u,2576974064u,48636451u,3693338611u,1932657914u,3676307717u,289800111u,2419055093u,13633535u,2172296674u,497041024u,1090599296u,2174319864u,2156429354u,3184737979u,4274834355u,214679137u,2576980383u,818711756u,3482945446u,1718078707u,3006477294u,837158937u,3800037162u,3183620970u,2238352376u,940111887u,1409025987u,1807999939u,1094778942u,3170492385u,1589516448u,2293953556u,1431826479u,4059939281u,3236986895u,2728942085u,4001676334u,4096475821u,1157911812u,4260223014u,3985661336u,1210614435u,3953795559u,252317429u,1907239296u,2157550507u,2916223661u,3501965224u,3307964629u,1109591347u,4094946919u,2556934759u,842212146u,2559089048u,3722214883u,67959217u,1369366784u,1930441523u,859412880u,429494400u,2149974566u,1912733717u,1902108977u,465565281u,3099445247u,3614835624u,92237105u,2046656511u,4110415261u,289521666u,2863328800u,4023307453u,4007495910u,429496729u,4077702348u,3489236582u,1743158467u,858993470u,1771987894u,1613147005u,4205488375u,717518632u,3308487101u,3713313620u,2864403540u,1430533457u,1091958080u,1433073533u,1431651668u,1159548949u,3713390613u,1431795031u,1939376538u,2310777506u,3710041354u,2878173327u,3207831073u,3726669649u,785453358u,3508951910u,1466221633u,3435650275u,354165589u,3691668066u,644297527u,1072484249u,3349046887u,3435923694u,2348810786u,35746355u,2013212880u,960757930u,799973498u,937967136u,2238050u,1055845832u,2927413934u,1641660391u,1731457843u,839096729u,4169238988u,993254652u,4004998818u,1718528744u,2821507211u,2909972567u,1028661376u,2650032809u,3186754650u,593423198u,2740234772u,91585876u,313256159u,3672801578u,354966913u,1599438337u,4195723832u,2283509914u,3015531445u,1117825928u,4144498935u,1914544699u,2272596717u,285408530u,1199011396u,1145327101u,1110793674u,4114670082u,1717990190u,3438235385u,2254857830u,4240932046u,3900702720u,127824u,3823570448u,4093110247u,2215131377u,3346215715u,867383680u,2308544924u,3704409915u,819912317u,2547091165u,11188986u,2284348387u,1029946306u,553714335u,2593874953u,3080889082u,539670007u,2852786346u,4210066095u,2935920584u,392693804u,2326245026u,2259421354u,3203663904u,2699820709u,2014293930u,29211972u,3209964509u,2165379088u,469280943u,1879831548u,102935040u,1429557264u,937720711u,2007263259u,2452634563u,4170713593u,4261151821u,4161035763u,2740059409u,1342833159u,322138371u,2449054081u,2160590848u,2952u,2290578367u,1036991680u,3459789727u,2682676838u,404339507u,1153048781u,2735030595u,3622823700u,470897889u,4199929793u,1598062518u,1448862724u,32510127u,1353176965u,91772920u,130187971u,3768590480u,4034863359u,2949840130u,2105869568u,2102668240u,802426917u,3764298238u,2784014512u,4030216248u,2021407807u,3900697588u,534003537u,1094718733u,68020605u,3900344238u,79432892u,1070854718u,35536889u,3783198471u,2122244336u,2163228480u,1342406785u,4193533247u,3233825020u,530571360u,1618493240u,536870912u,136u,139230448u,3425073273u,1711674123u,838871740u,4087482904u,4040105534u,1358462590u,2558033897u,919078826u,3420981762u,670461065u,1140020415u,318645241u,4162731929u,2173204472u,32526576u,1089532024u,2019557376u,0u,0u);
uint readBitsSVO0 (uint bitLoc, uint numBits) {
    uint wordLoc = bitLoc / 32u;
    uint leftToRead = (32u - (bitLoc % 32u));
    if (numBits <= leftToRead) {
        uint shiftToMask = leftToRead - numBits;
        uint masker = 0xFFFFFFFFu;
        masker >>= uint(32u - numBits);
        masker <<= shiftToMask;
        uint value = (svoObject0[wordLoc] & masker);
        value >>= shiftToMask;
        return value;
    } else {
        uint bottomBits = numBits - leftToRead;
        uint masker = 0xFFFFFFFFu;
        masker >>= uint(32u - leftToRead);
        uint topNum = (svoObject0[wordLoc] & masker);
        uint bottomMasker = 0xFFFFFFFFu;
        bottomMasker <<= uint(32u - bottomBits);
        uint value = (svoObject0[wordLoc + 1u] & bottomMasker);
        uint bottomNum = (value >> uint(32u - bottomBits));
        return ((topNum << bottomBits) | bottomNum);
    }
}

bool readLeafSVO0 (vec3 samplePos, vec3 sampleDir, out vec3 skipPos) {
    skipPos = vec3 (10000.0);
    if ( any(lessThan(samplePos, grid0Min)) || any(greaterThan(samplePos, grid0Max)) ) return false;
    uvec3 topBrickPos = uvec3 (samplePos - grid0Min);
    uint topBrickId = topBrickPos.z + topBrickPos.y * uint(grid0Range.x) + topBrickPos.x * uint(grid0Range.y) * uint(grid0Range.z);
    uint streamReadPos = 0u;
    for (int i = 0; i < int(topBrickId); i++) {
        uint isOcc = readBitsSVO0 (streamReadPos, 1u);
        streamReadPos += 1u;
        if (isOcc == 1u) {
            uint countMidBricks = countSetBits (readBitsSVO0 (streamReadPos, 8u));
            streamReadPos += (8u + countMidBricks * 8u);
        }
    }
    uint topBrick = readBitsSVO0 (streamReadPos, 1u);
    if (topBrick == 0u) {
        vec3 topBrickMin = grid0Min + vec3 (topBrickPos);
        vec3 topBrickMax = topBrickMin + vec3 (1.0);
        vec3 p1 = samplePos;
        vec3 p2 = p1 + sampleDir * 2.0;
        vec3 m = p2 - p1;
        float tMin, tMax;
        rayBoxIntersectTime (p1, vec3(1.0)/m, topBrickMin, topBrickMax, tMin, tMax);
        skipPos = p1 + m * (tMax + 0.01);
        return false;
    }
    streamReadPos += 1u;
    uint midBricks = readBitsSVO0 (streamReadPos, 8u);
    streamReadPos += 8u;
    vec3 topBrickMinCorner = grid0Min + vec3 (topBrickPos);
    vec3 sampleRelativeToTopBrick = fract (samplePos);
    uint checkMidBrickBit = 0x80u;
    vec3 sampleRelativeToMidBrick = sampleRelativeToTopBrick;
    vec3 midBrickPos = vec3 (0.0);
    if ( sampleRelativeToTopBrick.x > 0.5 ) {
        sampleRelativeToMidBrick.x -= 0.5;
        midBrickPos.x = 0.5;
        checkMidBrickBit >>= 4u;
    }
    if ( sampleRelativeToTopBrick.y > 0.5 ) {
        sampleRelativeToMidBrick.y -= 0.5;
        midBrickPos.y = 0.5;
        checkMidBrickBit >>= 2u;
    }
    if ( sampleRelativeToTopBrick.z > 0.5 ) {
        sampleRelativeToMidBrick.z -= 0.5;
        midBrickPos.z = 0.5;
        checkMidBrickBit >>= 1u;
    }
    if ( (midBricks & checkMidBrickBit) == 0u ) {
        vec3 midBrickMin = grid0Min + vec3 (topBrickPos) + midBrickPos;
        vec3 midBrickMax = midBrickMin + vec3 (0.5);
        vec3 p1 = samplePos;
        vec3 p2 = p1 + sampleDir * 2.0;
        vec3 m = p2 - p1;
        float tMin, tMax;
        rayBoxIntersectTime (p1, vec3(1.0)/m, midBrickMin, midBrickMax, tMin, tMax);
        skipPos = p1 + m * (tMax + 0.01);
        return false;
    }
    uint skipMidBricks = countSetBitsBefore (midBricks, checkMidBrickBit);
    streamReadPos += (8u * skipMidBricks);
    uint finalMidBrick = readBitsSVO0 (streamReadPos, 8u);
    uint checkVoxelBrickBit = 0x80u;
    if ( sampleRelativeToMidBrick.x > 0.25 ) {
    checkVoxelBrickBit >>= 4u;
    }
    if ( sampleRelativeToMidBrick.y > 0.25 ) {
        checkVoxelBrickBit >>= 2u;
    }
    if ( sampleRelativeToMidBrick.z > 0.25 ) {
        checkVoxelBrickBit >>= 1u;
    }
    if ( (checkVoxelBrickBit & finalMidBrick) != 0u ) return true;
    skipPos = samplePos + sampleDir * 0.25;
    return false;
}

bool traceRaySVO0(vec3 p1, vec3 p2, out vec3 hitPos) {
    vec3 m = p2 - p1;
    float hitMin, hitMax;
    if ( !rayBoxIntersectTime (p1, vec3(1.0)/m, grid0Min, grid0Max, hitMin, hitMax) ) {
        hitPos = vec3 (-1.0);
        return false;
    }
    
    hitMin += 0.00001;
    hitMax -= 0.00001;
    vec3 curPos = p1 + hitMin * m;
    vec3 curDir = normalize (m);
    vec3 skipPos = vec3 (0.0);
    for (int i = 0; i != 100; i++) {
        if (readLeafSVO0 (curPos, curDir, skipPos)) {
            hitPos = curPos;
            return true;
        }
        if ( skipPos == vec3(10000.0) ) break;
        curPos = skipPos;
    }
    return false;
}
const vec3 grid1Min = vec3 (-5.00, -5.00, -5.00);
const vec3 grid1Max = vec3 (5.00, 5.00, 5.00);
const vec3 grid1Range = grid1Max - grid1Min;
uint svoObject1[591] = uint[](559947905u,130u,46269312u,514u,536913538u,2184161023u,3622486323u,4144967372u,4293156985u,3790071392u,1651699907u,1946123424u,1077960803u,3887358020u,1128161905u,4268123168u,537585720u,577215014u,3154653522u,4148153886u,505400861u,167905280u,131878029u,2143863107u,3221120615u,3787481185u,2551824179u,4111414071u,146841351u,2409610816u,1862307779u,4281329121u,1734367263u,2955980920u,1476950129u,1157909505u,3890628199u,3884949118u,2202517854u,3199745567u,505290271u,252661519u,262793311u,2172289668u,1052524220u,541131105u,3957197310u,2141257600u,3718908431u,2273675143u,2277622723u,3284397025u,1609178784u,2735386250u,136324972u,356269801u,1787027941u,3768559601u,1895024399u,284411781u,125024452u,21955663u,4060368871u,2248644616u,568456131u,2181839987u,3819000001u,2195584u,2424340496u,4032815308u,3757766498u,1726381694u,2124414771u,854380351u,1020054527u,2578998895u,2278551449u,3940544764u,578816008u,771509267u,2096942396u,3421922401u,3442623961u,2570789635u,211565721u,2342418022u,3364391041u,253753356u,217032277u,2725795847u,2818544051u,793758799u,3284113790u,2098732829u,2559568000u,5750999u,2244973928u,931166617u,2280127683u,2127482062u,1717986918u,1865626419u,993237432u,2006545407u,939315392u,1942948872u,4001267320u,1734835951u,1086130870u,3345487189u,4289374909u,285474832u,1549009979u,3430841982u,1904286841u,4277092336u,3320450181u,1391264595u,2114287743u,2119598473u,721552061u,186786304u,2138509486u,1888121720u,2695406082u,2288749226u,3175277456u,4027592768u,4227377165u,1358918396u,102900224u,715169962u,3210414767u,2735002689u,3291764692u,2870023381u,269101102u,3537882415u,1278227392u,3286755302u,404250851u,4024929288u,283567880u,46050974u,767082305u,4244354032u,837873910u,429496440u,2063027404u,3469659377u,2143745094u,4043719695u,1090848015u,3205202685u,1069577333u,659542276u,1072290201u,2575703576u,404749504u,3704409886u,2085408208u,1450169351u,3493939155u,4217421633u,2533480859u,839702843u,3006896537u,2576981468u,3319738460u,4213428701u,1134592u,170396296u,666614579u,1731932779u,2576980383u,2680999116u,3435980390u,3890636403u,993211187u,999921440u,2576872409u,3757294556u,265323407u,3751829438u,2193793501u,79675481u,3003503873u,2123390216u,138173532u,2097144816u,2343958993u,4185956417u,20572307u,1801715899u,2066949325u,4280486280u,269061324u,1288490446u,4228316664u,50175468u,327076064u,2148016165u,4115743644u,1064058877u,2079375329u,2384337400u,4039159840u,213925890u,2720255521u,4024897032u,284485583u,3985106822u,276330620u,1022100472u,15968965u,737913031u,1128497985u,568983105u,3959398618u,2774010378u,8421597u,3301015308u,1072952799u,1344069889u,3898614399u,4249921541u,2059960694u,2149621794u,3220536837u,2047799546u,2969073784u,301487116u,68027397u,3674335962u,1465876488u,537915734u,3427003133u,4227466757u,3250315640u,2805936181u,792662002u,2678037917u,2439015167u,3241843170u,2548051464u,25182370u,44498878u,3119759935u,3896254600u,2425094268u,202128444u,4263904796u,1910906494u,2096136975u,507412086u,1635878014u,2137995052u,281227211u,3754924056u,568582687u,3754740785u,3287486334u,3580802928u,1075645706u,4211046512u,1078036383u,947139132u,840439833u,218976015u,2946003907u,2273820283u,2365301519u,2822243671u,4111745367u,1413571932u,272976961u,1098762801u,3721354269u,1095042133u,1442409816u,132730988u,138160174u,101588543u,1997434096u,2773552872u,1140867409u,1098604673u,3785236350u,520994560u,4282359708u,2088263811u,2251831750u,731648064u,1224441982u,2418180094u,4106212034u,2160313119u,1578123747u,3474857224u,2382921860u,2193795555u,3993631992u,4034588751u,251525144u,2061861928u,1346906114u,547463184u,4037574248u,2084322364u,943715819u,4113228294u,448535050u,167815176u,543164458u,134642184u,51307691u,4194471174u,41946744u,2918948502u,1682310048u,16974083u,2164343116u,1365893284u,2054516336u,4080221820u,1011897758u,1888000002u,2143558716u,4173579203u,3288321550u,410673632u,1104872207u,167789572u,1043209980u,3789692656u,4042309824u,4279176920u,2021156934u,2164769646u,3242180629u,85417852u,2017476743u,2273778751u,3284810814u,2651447776u,2548167183u,4195216032u,89586665u,1133911374u,505220110u,226985965u,2181561985u,1788174892u,914445659u,1303296728u,276369446u,2181955738u,2941937086u,3763421463u,3241896318u,161750006u,1595081487u,954404671u,2390254223u,2624987170u,671621742u,808705586u,269484032u,2421162143u,2156201345u,182403278u,3236880482u,4287557345u,532902911u,202165455u,3789684615u,2254858236u,1009512945u,938479651u,4267861880u,1744336768u,1644115763u,2013196254u,889050384u,1075152161u,2828773407u,4046598336u,3661368523u,2944661383u,3313893891u,3766607905u,3790729456u,4042261242u,2019031239u,2689319100u,2088569825u,1633804357u,1410601963u,1809970657u,3083202608u,284225784u,3094606727u,678671267u,502735545u,2711717678u,1083244312u,4042319952u,2017527135u,82806407u,2186809445u,4185715699u,3271765052u,836887070u,3189567648u,2695114772u,674227726u,1013033440u,2751460099u,209665470u,871627263u,2164553848u,2018514263u,450961006u,1685087230u,1158680835u,3130635785u,2289469858u,548055557u,1454077610u,1984193604u,2293479914u,2862754466u,15083116u,3864918924u,1944259741u,3006372249u,2432696320u,260276614u,2277297983u,4114859774u,1658656802u,1738474956u,3352051692u,3999690402u,3865475895u,972223283u,1067047809u,2172230047u,3555798784u,4241208589u,327222610u,2172771773u,65487088u,1351081479u,4162831296u,3234840099u,3760218239u,2678059152u,540228354u,132070296u,670563870u,2145218543u,1010798386u,2071291039u,1142177877u,795430965u,3764477470u,236851455u,252657274u,4164431759u,41781123u,4194479008u,2179695095u,252620368u,4031836415u,2290088059u,4161828944u,358252017u,85491608u,2021147696u,1009916443u,3063655082u,3139478200u,984154111u,4273750011u,3158061088u,1033793873u,2651850069u,1971148695u,1363230740u,2852665346u,1790536702u,2529042079u,4262467592u,2169853931u,4116037952u,27830784u,553298682u,2007670869u,796200999u,3881846176u,1511518258u,3019634696u,2616204287u,3825640106u,33558050u,116000688u,4022010610u,50434048u,15874u,505552543u,3707554800u,2970553615u,2120638486u,2122310015u,1060320047u,3426500511u,2577000422u,505401292u,3685953551u,3419476060u,3624534535u,54776729u,3656548841u,4281532992u,3107783173u,3130529816u,1296841795u,7691889u,1599422592u,2162151745u,1137015327u,2688448761u,3787556358u,519860448u,2164743960u,2286158008u,134772860u,203177059u,4294836283u,1975529423u,3659067631u,252645144u,2139602480u,1143087166u,505183745u,4269338848u,4134885519u,4205826175u,2156364679u,884638662u,941625223u,2172618223u,4230480940u,536101205u,3288219616u,4125223441u,1308983424u,58753505u,4106059472u,3222136688u,1074234630u,0u,4459558u,101061379u,33562369u,251989535u,2273805432u,2143535809u,1070219520u,142641089u,3258883135u,3760070174u,535830512u,2055209952u,569041227u,4027518735u,1056444349u,1950375968u,24137744u,4042815610u,2020636703u,538968189u,1413075970u,2216441723u,1754613309u,4097840205u,3574593951u,4276373487u,3657719808u,0u);
uint readBitsSVO1 (uint bitLoc, uint numBits) {
    uint wordLoc = bitLoc / 32u;
    uint leftToRead = (32u - (bitLoc % 32u));
    if (numBits <= leftToRead) {
        uint shiftToMask = leftToRead - numBits;
        uint masker = 0xFFFFFFFFu;
        masker >>= uint(32u - numBits);
        masker <<= shiftToMask;
        uint value = (svoObject1[wordLoc] & masker);
        value >>= shiftToMask;
        return value;
    } else {
        uint bottomBits = numBits - leftToRead;
        uint masker = 0xFFFFFFFFu;
        masker >>= uint(32u - leftToRead);
        uint topNum = (svoObject1[wordLoc] & masker);
        uint bottomMasker = 0xFFFFFFFFu;
        bottomMasker <<= uint(32u - bottomBits);
        uint value = (svoObject1[wordLoc + 1u] & bottomMasker);
        uint bottomNum = (value >> uint(32u - bottomBits));
        return ((topNum << bottomBits) | bottomNum);
    }
}

bool readLeafSVO1 (vec3 samplePos, vec3 sampleDir, out vec3 skipPos) {
    skipPos = vec3 (10000.0);
    if ( any(lessThan(samplePos, grid1Min)) || any(greaterThan(samplePos, grid1Max)) ) return false;
    uvec3 topBrickPos = uvec3 (samplePos - grid1Min);
    uint topBrickId = topBrickPos.z + topBrickPos.y * uint(grid0Range.x) + topBrickPos.x * uint(grid0Range.y) * uint(grid0Range.z);
    uint streamReadPos = 0u;
    for (int i = 0; i < int(topBrickId); i++) {
        uint isOcc = readBitsSVO1 (streamReadPos, 1u);
        streamReadPos += 1u;
        if (isOcc == 1u) {
            uint countMidBricks = countSetBits (readBitsSVO1 (streamReadPos, 8u));
            streamReadPos += (8u + countMidBricks * 8u);
        }
    }
    uint topBrick = readBitsSVO1 (streamReadPos, 1u);
    if (topBrick == 0u) {
        vec3 topBrickMin = grid1Min + vec3 (topBrickPos);
        vec3 topBrickMax = topBrickMin + vec3 (1.0);
        vec3 p1 = samplePos;
        vec3 p2 = p1 + sampleDir * 2.0;
        vec3 m = p2 - p1;
        float tMin, tMax;
        rayBoxIntersectTime (p1, vec3(1.0)/m, topBrickMin, topBrickMax, tMin, tMax);
        skipPos = p1 + m * (tMax + 0.01);
        return false;
    }
    streamReadPos += 1u;
    uint midBricks = readBitsSVO1 (streamReadPos, 8u);
    streamReadPos += 8u;
    vec3 topBrickMinCorner = grid1Min + vec3 (topBrickPos);
    vec3 sampleRelativeToTopBrick = fract (samplePos);
    uint checkMidBrickBit = 0x80u;
    vec3 sampleRelativeToMidBrick = sampleRelativeToTopBrick;
    vec3 midBrickPos = vec3 (0.0);
    if ( sampleRelativeToTopBrick.x > 0.5 ) {
        sampleRelativeToMidBrick.x -= 0.5;
        midBrickPos.x = 0.5;
        checkMidBrickBit >>= 4u;
    }
    if ( sampleRelativeToTopBrick.y > 0.5 ) {
        sampleRelativeToMidBrick.y -= 0.5;
        midBrickPos.y = 0.5;
        checkMidBrickBit >>= 2u;
    }
    if ( sampleRelativeToTopBrick.z > 0.5 ) {
        sampleRelativeToMidBrick.z -= 0.5;
        midBrickPos.z = 0.5;
        checkMidBrickBit >>= 1u;
    }
    if ( (midBricks & checkMidBrickBit) == 0u ) {
        vec3 midBrickMin = grid1Min + vec3 (topBrickPos) + midBrickPos;
        vec3 midBrickMax = midBrickMin + vec3 (0.5);
        vec3 p1 = samplePos;
        vec3 p2 = p1 + sampleDir * 2.0;
        vec3 m = p2 - p1;
        float tMin, tMax;
        rayBoxIntersectTime (p1, vec3(1.0)/m, midBrickMin, midBrickMax, tMin, tMax);
        skipPos = p1 + m * (tMax + 0.01);
        return false;
    }
    uint skipMidBricks = countSetBitsBefore (midBricks, checkMidBrickBit);
    streamReadPos += (8u * skipMidBricks);
    uint finalMidBrick = readBitsSVO1 (streamReadPos, 8u);
    uint checkVoxelBrickBit = 0x80u;
    if ( sampleRelativeToMidBrick.x > 0.25 ) {
    checkVoxelBrickBit >>= 4u;
    }
    if ( sampleRelativeToMidBrick.y > 0.25 ) {
        checkVoxelBrickBit >>= 2u;
    }
    if ( sampleRelativeToMidBrick.z > 0.25 ) {
        checkVoxelBrickBit >>= 1u;
    }
    if ( (checkVoxelBrickBit & finalMidBrick) != 0u ) return true;
    skipPos = samplePos + sampleDir * 0.25;
    return false;
}

bool traceRaySVO1(vec3 p1, vec3 p2, out vec3 hitPos) {
    vec3 m = p2 - p1;
    float hitMin, hitMax;
    if ( !rayBoxIntersectTime (p1, vec3(1.0)/m, grid1Min, grid1Max, hitMin, hitMax) ) {
        hitPos = vec3 (-1.0);
        return false;
    }
    
    hitMin += 0.00001;
    hitMax -= 0.00001;
    vec3 curPos = p1 + hitMin * m;
    vec3 curDir = normalize (m);
    vec3 skipPos = vec3 (0.0);
    for (int i = 0; i != 100; i++) {
        if (readLeafSVO1 (curPos, curDir, skipPos)) {
            hitPos = curPos;
            return true;
        }
        if ( skipPos == vec3(10000.0) ) break;
        curPos = skipPos;
    }
    return false;
}
const vec3 grid2Min = vec3 (-5.00, -5.00, -5.00);
const vec3 grid2Max = vec3 (5.00, 5.00, 5.00);
const vec3 grid2Range = grid2Max - grid2Min;
uint svoObject2[406] = uint[](140517500u,872168448u,0u,131619u,53674755u,4261815835u,3193971175u,3791598371u,4042534961u,4090494731u,2684352639u,1711570767u,3405523952u,924066117u,1975578498u,663121657u,2724626430u,4233327587u,3288326141u,4261011714u,1719239068u,3430467388u,3896524816u,2361393382u,545254143u,4294967171u,859550515u,938866161u,530668769u,1074819313u,2146990200u,2147055624u,180108799u,3287531039u,3995016208u,34118415u,3482259215u,2231732096u,1090724097u,8742u,571683635u,855849369u,2568616444u,217843729u,17805197u,2141745799u,2369586110u,716992487u,2716594078u,1726459658u,150319087u,135069826u,96584131u,60422774u,2716453943u,4009543876u,1145045376u,3221228167u,2852648895u,993192259u,3621765017u,4226523032u,348105258u,145721345u,4262849143u,2153090799u,2867505834u,2884272770u,2820669610u,2864351272u,3941245482u,3955372014u,4273012783u,3954524202u,3131746986u,3145861922u,9416609u,1535475690u,2754087592u,169878063u,2139081778u,3967882047u,4024917528u,283352989u,178915328u,17830297u,4159060967u,1341599424u,3237166881u,3764414433u,4028670077u,71128117u,1412915527u,1718968294u,2000638782u,3812035704u,1470496647u,3156749372u,140517484u,826228253u,2652770568u,134217796u,71174686u,505289226u,134225665u,253173503u,2281669375u,2147993554u,4257467459u,3841802726u,1077936802u,2729091567u,4010543152u,4159638758u,2188306393u,2800257198u,3934298794u,537063050u,3085740718u,2785414714u,2935533535u,1881333792u,2725249008u,1290809597u,3121596431u,2927392888u,2055374396u,603204564u,672485392u,1434451936u,4227323399u,1141310451u,4088002942u,2156002619u,49613812u,3218375937u,1426589709u,1565875540u,232739157u,1681948028u,735849428u,337728853u,1107823439u,72350479u,1307568121u,1717047407u,4194094092u,863239372u,1046875705u,4192601662u,4268794049u,259946728u,1077985152u,2291630251u,2868888235u,3953229953u,2428820728u,1719563296u,536870912u,71568588u,322117491u,859806081u,109042049u,2627502157u,3756138239u,4193229262u,84869119u,3423254666u,4223143767u,3015188995u,2719127689u,2576465405u,1412092135u,2860778500u,1078459402u,4235186347u,301757776u,720371415u,1107699205u,1433910133u,3587523585u,1158681677u,1432178965u,3642161674u,34209537u,50597175u,4258249727u,25276414u,2122193279u,14540798u,1060832085u,3958287018u,1090600809u,4282425207u,1754755887u,185608449u,2440122385u,3883390295u,74925071u,2729441799u,3794252623u,3148084207u,2680153958u,1720261119u,4080206860u,822267084u,4145675140u,161080947u,864172962u,1081584u,142084112u,2018509328u,402734899u,922951550u,4171210649u,2676091486u,3700169981u,3367898654u,521673227u,134265528u,2289535146u,3803949696u,2954370992u,3735308973u,3581018176u,1144908465u,3722583726u,4124092576u,2239688564u,380114924u,604378453u,1977048412u,1162101085u,1564738781u,1171591551u,2422024706u,681572221u,4291031811u,202182654u,2130188321u,2173142975u,3757030448u,567791550u,353637429u,1252704095u,1157698555u,4261710207u,3791650607u,571411503u,528555921u,2003915071u,3980883015u,1353097218u,4289098675u,926874275u,1067427432u,404398015u,3274783756u,3287547745u,2577285627u,4147362339u,838862880u,2105293843u,4293989171u,4240439487u,4120484343u,4294770677u,2328881749u,2718005015u,33453847u,3942416248u,2021147771u,4249009092u,1788698624u,2158690177u,2009595807u,3359260350u,2130158918u,1071155374u,3760890538u,2863316623u,3993634830u,2919754374u,3894847498u,2827659274u,2720137894u,2930441903u,1392422402u,242154993u,2835016362u,39870951u,4160008167u,2411737136u,4278691719u,2817540184u,1816051336u,22040661u,4160194309u,142145783u,1673739516u,3271768544u,2174352353u,2852109531u,2689466127u,3121152256u,1414861892u,905278814u,2690557296u,539506808u,142441853u,2105442686u,2202091840u,520949583u,1041230329u,2122710535u,3993435146u,4244569343u,51543590u,1853784057u,3254650366u,4271962240u,2160082959u,2290321967u,4221545470u,2209907330u,2172764352u,3235931744u,1612710114u,578694911u,2147193139u,1069535295u,3650879423u,4294187034u,185540631u,387389671u,264206456u,1613334407u,2273541633u,4228556938u,2827126783u,3156346885u,3284386755u,4228279871u,1440858433u,2162819744u,2863378186u,737542128u,4244440829u,2192570488u,1210581119u,1062195248u,271597315u,4292349976u,403177472u,161001331u,4268019507u,859012709u,4131472388u,68417194u,1141504950u,2579183411u,923090942u,4247507071u,1349862400u,1882206264u,403701760u,117507008u,0u,307u,20123955u,2583422873u,2571941868u,2348843691u,2281609214u,2172649406u,3082034750u,3768315647u,2690624744u,252444704u,2694970608u,1560257284u,4241389168u,1203519552u,272693360u,947414048u,536870912u,0u,1245443u,151093259u,3146255856u,2156896063u,3207643591u,1044365211u,1996482112u,3208644092u,348961863u,3742626814u,4292998467u,2652798717u,4261483383u,3439262968u,4131112000u,2118123972u,1157480694u,2147360864u,1616917248u);
uint readBitsSVO2 (uint bitLoc, uint numBits) {
    uint wordLoc = bitLoc / 32u;
    uint leftToRead = (32u - (bitLoc % 32u));
    if (numBits <= leftToRead) {
        uint shiftToMask = leftToRead - numBits;
        uint masker = 0xFFFFFFFFu;
        masker >>= uint(32u - numBits);
        masker <<= shiftToMask;
        uint value = (svoObject2[wordLoc] & masker);
        value >>= shiftToMask;
        return value;
    } else {
        uint bottomBits = numBits - leftToRead;
        uint masker = 0xFFFFFFFFu;
        masker >>= uint(32u - leftToRead);
        uint topNum = (svoObject2[wordLoc] & masker);
        uint bottomMasker = 0xFFFFFFFFu;
        bottomMasker <<= uint(32u - bottomBits);
        uint value = (svoObject2[wordLoc + 1u] & bottomMasker);
        uint bottomNum = (value >> uint(32u - bottomBits));
        return ((topNum << bottomBits) | bottomNum);
    }
}

bool readLeafSVO2 (vec3 samplePos, vec3 sampleDir, out vec3 skipPos) {
    skipPos = vec3 (10000.0);
    if ( any(lessThan(samplePos, grid2Min)) || any(greaterThan(samplePos, grid2Max)) ) return false;
    uvec3 topBrickPos = uvec3 (samplePos - grid2Min);
    uint topBrickId = topBrickPos.z + topBrickPos.y * uint(grid0Range.x) + topBrickPos.x * uint(grid0Range.y) * uint(grid0Range.z);
    uint streamReadPos = 0u;
    for (int i = 0; i < int(topBrickId); i++) {
        uint isOcc = readBitsSVO2 (streamReadPos, 1u);
        streamReadPos += 1u;
        if (isOcc == 1u) {
            uint countMidBricks = countSetBits (readBitsSVO2 (streamReadPos, 8u));
            streamReadPos += (8u + countMidBricks * 8u);
        }
    }
    uint topBrick = readBitsSVO2 (streamReadPos, 1u);
    if (topBrick == 0u) {
        vec3 topBrickMin = grid2Min + vec3 (topBrickPos);
        vec3 topBrickMax = topBrickMin + vec3 (1.0);
        vec3 p1 = samplePos;
        vec3 p2 = p1 + sampleDir * 2.0;
        vec3 m = p2 - p1;
        float tMin, tMax;
        rayBoxIntersectTime (p1, vec3(1.0)/m, topBrickMin, topBrickMax, tMin, tMax);
        skipPos = p1 + m * (tMax + 0.01);
        return false;
    }
    streamReadPos += 1u;
    uint midBricks = readBitsSVO2 (streamReadPos, 8u);
    streamReadPos += 8u;
    vec3 topBrickMinCorner = grid2Min + vec3 (topBrickPos);
    vec3 sampleRelativeToTopBrick = fract (samplePos);
    uint checkMidBrickBit = 0x80u;
    vec3 sampleRelativeToMidBrick = sampleRelativeToTopBrick;
    vec3 midBrickPos = vec3 (0.0);
    if ( sampleRelativeToTopBrick.x > 0.5 ) {
        sampleRelativeToMidBrick.x -= 0.5;
        midBrickPos.x = 0.5;
        checkMidBrickBit >>= 4u;
    }
    if ( sampleRelativeToTopBrick.y > 0.5 ) {
        sampleRelativeToMidBrick.y -= 0.5;
        midBrickPos.y = 0.5;
        checkMidBrickBit >>= 2u;
    }
    if ( sampleRelativeToTopBrick.z > 0.5 ) {
        sampleRelativeToMidBrick.z -= 0.5;
        midBrickPos.z = 0.5;
        checkMidBrickBit >>= 1u;
    }
    if ( (midBricks & checkMidBrickBit) == 0u ) {
        vec3 midBrickMin = grid2Min + vec3 (topBrickPos) + midBrickPos;
        vec3 midBrickMax = midBrickMin + vec3 (0.5);
        vec3 p1 = samplePos;
        vec3 p2 = p1 + sampleDir * 2.0;
        vec3 m = p2 - p1;
        float tMin, tMax;
        rayBoxIntersectTime (p1, vec3(1.0)/m, midBrickMin, midBrickMax, tMin, tMax);
        skipPos = p1 + m * (tMax + 0.01);
        return false;
    }
    uint skipMidBricks = countSetBitsBefore (midBricks, checkMidBrickBit);
    streamReadPos += (8u * skipMidBricks);
    uint finalMidBrick = readBitsSVO2 (streamReadPos, 8u);
    uint checkVoxelBrickBit = 0x80u;
    if ( sampleRelativeToMidBrick.x > 0.25 ) {
    checkVoxelBrickBit >>= 4u;
    }
    if ( sampleRelativeToMidBrick.y > 0.25 ) {
        checkVoxelBrickBit >>= 2u;
    }
    if ( sampleRelativeToMidBrick.z > 0.25 ) {
        checkVoxelBrickBit >>= 1u;
    }
    if ( (checkVoxelBrickBit & finalMidBrick) != 0u ) return true;
    skipPos = samplePos + sampleDir * 0.25;
    return false;
}

bool traceRaySVO2(vec3 p1, vec3 p2, out vec3 hitPos) {
    vec3 m = p2 - p1;
    float hitMin, hitMax;
    if ( !rayBoxIntersectTime (p1, vec3(1.0)/m, grid2Min, grid2Max, hitMin, hitMax) ) {
        hitPos = vec3 (-1.0);
        return false;
    }
    
    hitMin += 0.00001;
    hitMax -= 0.00001;
    vec3 curPos = p1 + hitMin * m;
    vec3 curDir = normalize (m);
    vec3 skipPos = vec3 (0.0);
    for (int i = 0; i != 100; i++) {
        if (readLeafSVO2 (curPos, curDir, skipPos)) {
            hitPos = curPos;
            return true;
        }
        if ( skipPos == vec3(10000.0) ) break;
        curPos = skipPos;
    }
    return false;
}